#!/usr/bin/env python3

import rospy
from geometry_msgs.msg import Quaternion
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from tf.broadcaster import TransformBroadcaster
from std_msgs.msg import Int32

from math import asin, sin, cos, pi

"""
   odom_node - follows the output of a wheel encoder and creates tf and odometry messages.
   Reworked from https://github.com/jfstepha/differential-drive
"""

class Odom:
    def __init__(self):
        rospy.init_node("odom")
        self.nodename = rospy.get_name()
        rospy.loginfo("%s started" % self.nodename)
        
        # Parameters
        self.driver_rate = rospy.get_param('driver_rate', 10)  # the rate ticks are published
        
        self.ticks_meter = float(rospy.get_param('~ticks_meter', 1000 / 120 * 790))  # encoder ticks per meter of travel
        self.base_width = float(rospy.get_param('~wheel_base', 0.060)) # The wheel base width in meters
        
        self.base_frame_id = rospy.get_param('~base_frame_id','base_link') # the name of the base frame of the robot - child_frame_id
        self.odom_frame_id = rospy.get_param('~odom_frame_id', 'odom') # the name of the odometry reference frame - frame_id

        self.odom_topic = rospy.get_param('~odom_topic', 'odom') # the name of the topic on which to publish

        self.odom_publish_tf = rospy.get_param('~odom_publish_tf', 'true') # Should we publish a transform or not?
        rospy.loginfo("odom_publish_tf %s" % self.odom_publish_tf)

        # Our encoder values are not incremental, so wont wrap
        #self.encoder_min = rospy.get_param('encoder_min', -32768)
        #self.encoder_max = rospy.get_param('encoder_max', 32768)
        #self.encoder_low_wrap = rospy.get_param('wheel_low_wrap', (self.encoder_max - self.encoder_min) * 0.3 + self.encoder_min )
        #self.encoder_high_wrap = rospy.get_param('wheel_high_wrap', (self.encoder_max - self.encoder_min) * 0.7 + self.encoder_min )

        # Elapsed time no longer used
        #self.t_delta = rospy.Duration(1.0/self.rate)
        #self.t_next = rospy.Time.now() + self.t_delta
        
        # internal data
        #self.enc_left = None        # wheel encoder readings
        #self.enc_right = None
        self.left = 0               # actual values coming back from robot
        self.right = 0
        self.left_updated = False   # keep track of updated values
        self.right_updated = False
        self.left_total = 0
        self.right_total = 0
        #self.lmult = 0             # to deal with encoder value wrap around
        #self.rmult = 0
        #self.prev_lencoder = 0      # previous encoder values
        #self.prev_rencoder = 0
        self.x = 0                  # position in xy plane 
        self.y = 0
        self.th = 0
        #self.dx = 0                 # speeds in x/rotation
        #self.dr = 0
        self.then = rospy.Time.now()
        
        # subscriptions
        rospy.Subscriber("lwheel_ticks", Int32, self.lwheel_callback)
        rospy.Subscriber("rwheel_ticks", Int32, self.rwheel_callback)

        # publishers
        self.odomPub = rospy.Publisher(self.odom_topic, Odometry, queue_size=10)

        if self.odom_publish_tf:
            self.odomBroadcaster = TransformBroadcaster()

    def lwheel_callback(self, msg):
        enc = msg.data
        #if (enc < self.encoder_low_wrap and self.prev_lencoder > self.encoder_high_wrap):
        #    self.lmult = self.lmult + 1
            
        #if (enc > self.encoder_high_wrap and self.prev_lencoder < self.encoder_low_wrap):
        #    self.lmult = self.lmult - 1
            
        #self.left = 1.0 * (enc + self.lmult * (self.encoder_max - self.encoder_min)) 

        # Raise error if we haven't used the encoder value
        if self.left_updated:
            rospy.logerr("%s Left encoder value skipped!" % self.nodename)
        #else:
        #    print("L updated {:0.0f}".format(enc))
      
        #if enc != 0:  
        #    self.left_total += enc
        #    print("L {:0.0f}".format(self.left_total))

        self.left = enc
        self.left_updated = True
        
    def rwheel_callback(self, msg):
        enc = msg.data
        #if(enc < self.encoder_low_wrap and self.prev_rencoder > self.encoder_high_wrap):
        #    self.rmult = self.rmult + 1
        
        #if(enc > self.encoder_high_wrap and self.prev_rencoder < self.encoder_low_wrap):
        #    self.rmult = self.rmult - 1
            
        #self.right = 1.0 * (enc + self.rmult * (self.encoder_max - self.encoder_min))

        # Raise error if we haven't used the encoder value
        if self.right_updated:
            rospy.logerr("%s Right encoder value skipped!" % self.nodename)
        #else:
        #    print("R updated {:0.0f}".format(enc))
      
        #if enc != 0: 
        #    self.right_total += enc
        #    print("R {:0.0f}".format(self.right_total))
 
        self.right = enc
        self.right_updated = True

    def update(self):
        #  Make sure we have an updated left and right encoder value
        if self.left_updated and self.right_updated:
            # Take a copy of encoder values incase they get updated
            left = self.left
            right = self.right
            # Reset updated status
            self.left_updated = False
            self.right_updated = False 

            # Calculate elapsed time
            now = rospy.Time.now()
            #elapsed_t = now - self.then
            #self.then = now
            #elapsed_t = elapsed_t.to_sec()
            # or just...
            elapsed = 1.0 / self.driver_rate

            # calculate odometry
            # left & right distance traveled
            d_left = left / self.ticks_meter
            d_right = right / self.ticks_meter
            # distance traveled is the average of the two wheels 
            d = ( d_left + d_right ) / 2
            # this approximation works (in radians) for small angles
            #th = ( d_right - d_left ) / self.base_width

            #alternate calculation https://github.com/lbrombach/practical_chapters/blob/master/chapter11/encoder_odom_publisher.cpp
            try:
                th = asin( (d_right - d_left) / self.base_width)
            except ValueError:  # Occasionally get math domain error
                th = ( d_right - d_left ) / self.base_width

            # calculate velocities
            dx = d / elapsed  # Change in linear x
            dr = th / elapsed  # Change is angular z rotation
            
            #print("Odom: enc_l {: 3.0f}, enc_r {: 3.0f}, d_l {: 0.2f}, d_r {: 0.2f}, d {: 0.2f}, th {: 0.2f}, " \
            #    "e {:0.2f}, e_t {:0.2f}, dx {: 0.2f}, dr {: 0.2f}".format(left, right, d_left, d_right, d, th, \
            #    elapsed, elapsed_t, dx, dr))

            if (d != 0):
                # calculate distance traveled in x and y
                x = cos( th ) * d
                y = -sin( th ) * d
                # calculate the final position of the robot
                self.x = self.x + ( cos( self.th ) * x - sin( self.th ) * y )
                self.y = self.y + ( sin( self.th ) * x + cos( self.th ) * y )
                self.th = self.th + th

                #print("Odom: enc_l {: 3.0f}, enc_r {: 3.0f}, d_l {: 0.2f}, d_r {: 0.2f}, d {: 0.2f}, th {: 0.2f}, " \
                #    "e {:0.2f}, e_t {:0.2f}, dx {: 0.2f}, dr {: 0.2f}".format(left, right, d_left, d_right, d, th, \
                #    elapsed, elapsed_t, dx, dr))               
                #print("Odom: x {: 0.2f}, y {: 0.2f}, self.x {: 0.2f}, self.y {: 0.2f}, self.th {: 0.2f}" \
                #    .format(x, y, self.x, self.y, self.th))

            # publish the transform information
            quaternion = Quaternion()
            quaternion.x = 0.0
            quaternion.y = 0.0
            quaternion.z = sin( self.th / 2 )
            quaternion.w = cos( self.th / 2 )
            if self.odom_publish_tf:
                self.odomBroadcaster.sendTransform(
                    (self.x, self.y, 0),
                    (quaternion.x, quaternion.y, quaternion.z, quaternion.w),
                    now,
                    self.base_frame_id,
                    self.odom_frame_id
                    )

            # publish the odom information            
            odom = Odometry()
            odom.header.stamp = now
            odom.header.frame_id = self.odom_frame_id
            odom.pose.pose.position.x = self.x
            odom.pose.pose.position.y = self.y
            odom.pose.pose.position.z = 0
            odom.pose.pose.orientation = quaternion
#            odom.child_frame_id = self.base_frame_id
            odom.twist.twist.linear.x = dx
            odom.twist.twist.linear.y = 0
            odom.twist.twist.angular.z = dr
            self.odomPub.publish(odom)

    def run(self):
        """The control loop of the driver."""

        # Go many times quicker than ticks are published to grab them striaght away
        rate = rospy.Rate(self.driver_rate * 10)

        while not rospy.is_shutdown():
            self.update()
            rate.sleep()


def main():
    odom = Odom()

    # Run odom. This will block
    odom.run()

if __name__ == '__main__':
    main()



