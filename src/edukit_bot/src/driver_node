#!/usr/bin/env python3

"""
    Listens for Twist messages and controls motors using PID
    Publishes encoder ticks
"""

import rospy
from geometry_msgs.msg import Twist
from std_msgs.msg import Int32
from PCA9685 import PCA9685
from gpiozero import DigitalInputDevice
from time import sleep

# Init the PCA9685 Hat
# TODO I should be able to move these two lines to __init__ in Driver, but then how do I use 'pwm' in Motor?
pwm = PCA9685(0x40, debug=False)
pwm.setPWMFreq(25)

# PID values
KP = 5 # Proportional
KD = 0.3 # Previous error
KI = 0.2 # Long term error

def _clip(value, minimum, maximum):
    """Ensure value is between minimum and maximum."""

    if value < minimum:
        return minimum
    elif value > maximum:
        return maximum
    return value


class Motor:
    def __init__(self, pwm_pin, forward_pin, backward_pin, encoder_pin):
        self._pwm_pin = pwm_pin
        self._forward_pin = forward_pin
        self._backward_pin = backward_pin
        self.power = 0

        # PID vars
        self._prev_error = 0
        self._sum_error = 0

        # Encoder init
        self.enc_value = 0
        self._encoder = DigitalInputDevice(encoder_pin, pull_up=True)
        self._encoder.when_activated = self._enc_increment
        self._encoder.when_deactivated = self._enc_increment
        self.nodename = rospy.get_name()
        rospy.loginfo("%s Motor %d Init" % (self.nodename, pwm_pin))

    def move(self, requested_speed, rate):
        # Number of ticks since we last looked
        ticks = self.enc_value
        #print("Motor: pin {:0.0f}, rate {:0.0f}, e_v {: 0.0f}, ticks {:2.0f}".format(self._pwm_pin, \
        #    rate,  self.enc_value, ticks))

        # Yellow TT Motor - 40 ticks per turn and 217mm per turn = 0.0050465 meters per tick
        # Micro Metal Gear Motor - 1580 ticks per turn and 0.143m per turn
        actual_speed = ticks * (0.143 / 1580) * rate

        error = requested_speed - actual_speed
        self.power += error * KP + self._prev_error * KD + self._sum_error * KI

        # Remove pid by un commenting this for debug
        # self.power = requested_speed * 10

        self.power = _clip(self.power, -1, 1)

        # If we should be stoped, just stop and reset PID
        if requested_speed == 0:
            self.power = 0
            self._prev_error = 0
            self._sum_error = 0
        else:
            self._prev_error = error
            self._sum_error += error

        # Duty cycle is positive between 0 and 100
        duty_cycle = abs(self.power * 100)

        # Less than 15 wont move the motors
        if duty_cycle < 15:
            duty_cycle = 0

        pwm.setDutycycle(self._pwm_pin, duty_cycle)

        # Positive speeds move wheels forward, negative speeds move wheels backward
        if self.power < 0:
            pwm.setLevel(self._forward_pin, 0)
            pwm.setLevel(self._backward_pin, 1)
        else:
            pwm.setLevel(self._forward_pin, 1)
            pwm.setLevel(self._backward_pin, 0)

        print("Motor: pin {:0.0f}, rate {:0.0f}, req'ed spd {: 0.3f}, ticks {: 3.0f}, " \
            "actual spd {: 0.3f}, err {: 0.3f}, prev err {: 0.3f}, sum err {: 0.3f}, pwr {: 0.2f}, " \
            " duty {:2.0f}".format(self._pwm_pin, rate, requested_speed, ticks, actual_speed, \
            error, self._prev_error, self._sum_error, self.power, duty_cycle))

    def enc_reset(self):
        self.enc_value = 0

    def _enc_increment(self):
        # Our encoders didn't recognise backwards, but if power is negative, they will be going backwards
        # We do now have quad encoders on our TT motors, but this seems to work fine...
        if self.power > 0:
            self.enc_value += 1
            #print("inc")
        else:
            self.enc_value -= 1
            #print("dec")


class Driver:
    def __init__(self):
        rospy.init_node('driver')
        self.nodename = rospy.get_name()
        rospy.loginfo("%s started" % self.nodename)

        # Parameters
        self._timeout = rospy.get_param('timeout', 50)
        self._rate = rospy.get_param('driver_rate', 10)
        self._max_speed = rospy.get_param('max_speed', 0.05)
        self._wheel_base = rospy.get_param('wheel_base', 0.138)

        # Assign PCA9685 pins to motors and GPIO pins to Encoders.
        self._left_motor = Motor(5, 4, 3, 23)
        self._right_motor = Motor(0, 1, 2, 24)

        # Setup Publishers for encoders
        self._leftPub = rospy.Publisher('lwheel_ticks', Int32, queue_size=10)
        self._rightPub = rospy.Publisher('rwheel_ticks', Int32, queue_size=10)

        # Init variables
        self._last_received = rospy.get_time()
        self._linear = 0
        self._angular = 0
        self._left_speed = 0
        self._right_speed = 0

        # Setup subscriber for velocity twist message
        rospy.Subscriber('cmd_vel', Twist, self.velocity_received_callback)

    def velocity_received_callback(self, message):
        """Handle new velocity command message."""

        self._last_received = rospy.get_time()

        # Extract linear and angular velocities from the message
        self._linear = _clip(message.linear.x, -self._max_speed, self._max_speed)
        self._angular = _clip(message.angular.z, -self._max_speed, self._max_speed)
        #self._linear = message.linear.x
        #self._angular = message.angular.z

        #print("Twist: Linear {: 0.2f}, Angular {: 0.2f}".format(self._linear, self._angular))

        # Calculate wheel speeds in m/s
        self._left_speed = self._linear - self._angular * self._wheel_base / 2
        self._right_speed = self._linear + self._angular * self._wheel_base / 2

    def run(self):
        """The control loop of the driver."""

        rate = rospy.Rate(self._rate)

        while not rospy.is_shutdown():
            # If we haven't received new commands for a while, we may have lost contact -- stop moving
            delay = rospy.get_time() - self._last_received
            if delay < self._timeout:
                self._left_motor.move(self._left_speed, self._rate)
                self._right_motor.move(self._right_speed, self._rate)
            else:
                self._left_motor.move(0, self._rate)
                self._right_motor.move(0, self._rate)

            # Publish encoder values for Odom
            self._leftPub.publish(self._left_motor.enc_value)
            self._rightPub.publish(self._right_motor.enc_value)

            self._left_motor.enc_reset()
            self._right_motor.enc_reset()

            #print("")
            rate.sleep()


def main():
    driver = Driver()

    # Run driver. This will block
    driver.run()

if __name__ == '__main__':
    main()
