#!/usr/bin/env python3

"""
    Listens for Twist messages and controls motors using PID
    Publishes encoder ticks
"""

import rospy
from geometry_msgs.msg import Twist
from std_msgs.msg import Int32
from PCA9685 import PCA9685
from gpiozero import DigitalInputDevice
from gpiozero import RotaryEncoder
from time import sleep
import warnings

# PID values
KP = 10 # Proportional
KD = 0.1 # Previous error
KI = 0.5 # Long term error

def _clip(value, minimum, maximum):
    """Ensure value is between minimum and maximum."""

    if value < minimum:
        return minimum
    elif value > maximum:
        return maximum
    return value


class Motor:
    def __init__(self, rate, pwm_pin, forward_pin, backward_pin, encoder_pin_A, encoder_pin_B, enc_topic):
        self._rate = rate
        self._pwm_pin = pwm_pin
        self._forward_pin = forward_pin
        self._backward_pin = backward_pin
        self.power = 0

        # PID vars
        self._prev_error = 0
        self._sum_error = 0

        # Encoder init
        self._encoder = RotaryEncoder(encoder_pin_A, encoder_pin_B, max_steps=0, threshold_steps=(0, 0), wrap=False)

        self._Pub = rospy.Publisher(enc_topic, Int32, queue_size=10)

        rospy.loginfo("%s Motor %d Init'ed" % (rospy.get_name(), pwm_pin))

    def move(self, requested_speed):
        # Save Number of ticks since we last looked
        ticks = self._encoder.steps

        # Reset encoder ticks to zero
        self._encoder.steps = 0

        # Publish number of encoder ticks
        self._Pub.publish(ticks)

        #print("Motor: pin {:0.0f}, rate {:0.0f}, e_v {: 0.0f}, ticks {:2.0f}".format(self._pwm_pin, \
        #    rate,  self.enc_value, ticks))

        # Yellow TT Motor - 40 ticks per turn and 217mm per turn = 0.0050465 meters per tick
        # Micro Metal Gear Motor - 1580 ticks per turn and 0.143m per turn
        actual_speed = ticks * (0.129 / 790) * self._rate

        error = requested_speed - actual_speed
        self.power += error * KP + self._prev_error * KD + self._sum_error * KI

        # Remove pid by un commenting this for debug
        # self.power = requested_speed * 10

        self.power = _clip(self.power, -1, 1)

        # If we should be stoped, just stop and reset PID
        if requested_speed == 0:
            self.power = 0
            error = 0
            self._prev_error = 0
            self._sum_error = 0

        # Duty cycle is positive between 0 and 100
        duty_cycle = abs(self.power * 100)

        # Less than 15 wont move the motors
        if duty_cycle < 15:
            duty_cycle = 0

        # Set motor direction
        # Positive speeds move wheels forward, negative speeds move wheels backward
        if self.power < 0:
            pwm.setLevel(self._forward_pin, 0)
            pwm.setLevel(self._backward_pin, 1)
        else:
            pwm.setLevel(self._forward_pin, 1)
            pwm.setLevel(self._backward_pin, 0)

        # Set motor speed
        pwm.setDutycycle(self._pwm_pin, duty_cycle)

        print("Mtr: pin {:0.0f}, rate {:0.0f}, req'ed spd {: 0.3f}, ticks {: 3.0f}, " \
            "ac spd {: 0.3f}, err {: 0.3f}, prv err {: 0.3f}, sum err {: 0.3f}, new pwr {: 0.2f}, " \
            " new duty {:2.0f}".format(self._pwm_pin, self._rate, requested_speed, ticks, actual_speed, \
            error, self._prev_error, self._sum_error, self.power, duty_cycle))

        # Record errors for next iteration
        self._prev_error = error
        self._sum_error += error

        # Check our motor is not stalled
        # Is our motor speed significantly behind where it should be?
        if abs(self._sum_error) > abs(requested_speed) * 5:
            # And is it continuing to get further behind?
            # x*y > 0 evaluates to True if both numbers have the same sign
            if error * self._sum_error > 0:
                rospy.logwarn("%s Motor %d might be stalled!" % (rospy.get_name(), self._pwm_pin))
            else:
                rospy.loginfo("%s Motor %d now seems to be unstalled!" % (rospy.get_name(), self._pwm_pin))

        # No point letting _sum_error get too large if motor is stalled for example
        self._sum_error = _clip(self._sum_error, 0 - abs(requested_speed * 10), abs(requested_speed * 10))


class Driver:
    def __init__(self):
        rospy.init_node('driver')
        rospy.loginfo("%s started" % rospy.get_name())

        # Parameters
        self._timeout = rospy.get_param('timeout', 3)
        self._rate = rospy.get_param('driver_rate', 10)
        self._max_speed = rospy.get_param('max_speed', 0.05)
        self._wheel_base = rospy.get_param('wheel_base', 0.138)

        # Assign PCA9685 pins to motors and GPIO pins to Encoders.
        self._left_motor = Motor(self._rate, 5, 4, 3, 23, 22, 'lwheel_ticks')
        self._right_motor = Motor(self._rate, 0, 1, 2, 25, 24, 'rwheel_ticks')

        # Init variables
        self._last_received = rospy.get_time()
        self._linear = 0
        self._angular = 0
        self._left_speed = 0
        self._right_speed = 0

        # Setup subscriber for velocity twist message
        rospy.Subscriber('cmd_vel', Twist, self.velocity_received_callback)

    def velocity_received_callback(self, message):
        """Handle new velocity command message."""

        self._last_received = rospy.get_time()

        # Extract linear and angular velocities from the message
        self._linear = _clip(message.linear.x, -self._max_speed, self._max_speed)
        # TODO Add _max_angular parameter if we feel we need to
        #self._angular = _clip(message.angular.z, -self._max_angular, self._max_angular)
        #self._linear = message.linear.x
        self._angular = message.angular.z

        # print("Twist: Linear {: 0.2f}, Angular {: 0.2f}".format(self._linear, self._angular))

        # Calculate wheel speeds in m/s
        self._left_speed = self._linear - self._angular * self._wheel_base / 2
        self._right_speed = self._linear + self._angular * self._wheel_base / 2

    def run(self):
        """The control loop of the driver."""

        rate = rospy.Rate(self._rate)

        while not rospy.is_shutdown():
            # If we haven't received new commands for a while, we may have lost contact -- stop moving
            delay = rospy.get_time() - self._last_received
            if delay < self._timeout:
                self._left_motor.move(self._left_speed)
                self._right_motor.move(self._right_speed)
            else:
                self._left_motor.move(0)
                self._right_motor.move(0)

            #print("")
            rate.sleep()

        # On shutdown stop motors
        self._left_motor.move(0)
        self._right_motor.move(0)


def main():
    # We use Pigpio, ignore rpigpio, lgpio and rpio errors
    warnings.filterwarnings("ignore", message="Falling back from")

    # Init the PCA9685 Hat
    global pwm
    pwm = PCA9685(0x40, debug=False)
    pwm.setPWMFreq(50)

    driver = Driver()

    # Run driver. This will block
    driver.run()

if __name__ == '__main__':
    main()
