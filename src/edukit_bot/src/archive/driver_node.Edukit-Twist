#!/usr/bin/env python3

import rospy
from geometry_msgs.msg import Twist

from gpiozero import CamJamKitRobot


def _clip(value, minimum, maximum):
    """Ensure value is between minimum and maximum."""

    if value < minimum:
        return minimum
    elif value > maximum:
        return maximum
    return value


class Driver:
    def __init__(self):
        rospy.init_node('driver')

        self._last_received = rospy.get_time()
        self._timeout = rospy.get_param('~timeout', 2)
        self._rate = rospy.get_param('~rate', 10)
        self._max_speed = rospy.get_param('~max_speed', 1.0)  # 0.5 to enable full speed
        self._wheel_base = rospy.get_param('~wheel_base', 0.091)

        self._left_speed_percent = 0
        self._right_speed_percent = 0

        self._robot = CamJamKitRobot()

        # Setup subscriber for velocity twist message
        rospy.Subscriber(
            'cmd_vel', Twist, self.velocity_received_callback)

    def velocity_received_callback(self, message):
        """Handle new velocity command message."""

        self._last_received = rospy.get_time()

        # Extract linear and angular velocities from the message
        linear = message.linear.x
        angular = message.angular.z

        # Calculate wheel speeds in m/s
        left_speed = linear - angular*self._wheel_base/2
        right_speed = linear + angular*self._wheel_base/2

        # Ideally we'd now use the desired wheel speeds along
        # with data from wheel speed sensors to come up with the
        # power we need to apply to the wheels, but we don't have
        # wheel speed sensors. Instead, we'll simply convert m/s
        # into percent of maximum wheel speed, which gives us a
        # duty cycle that we can apply to each motor.
        self._left_speed_percent = (left_speed/self._max_speed)
        self._right_speed_percent = (right_speed/self._max_speed)


    def run(self):
        """The control loop of the driver."""

        rate = rospy.Rate(self._rate)

        while not rospy.is_shutdown():
            # If we haven't received new commands for a while, we
            # may have lost contact with the commander - stop moving
            delay = rospy.get_time() - self._last_received
            if delay < self._timeout:
                _clip_left = _clip(self._left_speed_percent, -1, 1)
                _clip_right = _clip(self._right_speed_percent, -1, 1)

                if _clip_left < 0:
                    self._robot.left_motor.backward(abs(_clip_left))
                else:
                    self._robot.left_motor.forward(_clip_left)

                if _clip_right < 0:
                    self._robot.right_motor.backward(abs(_clip_right))
                else:
                    self._robot.right_motor.forward(_clip_right)

#                self._robot.left_motor.forward(self._left_speed_percent)
#                self._robot.right_motor.forward(self._right_speed_percent)
#                self._left_motor.move(self._left_speed_percent)
#                self._right_motor.move(self._right_speed_percent)
            else:
                self._robot.stop()

            rate.sleep()


def main():
    driver = Driver()

    # Run driver. This will block
    driver.run()


if __name__ == '__main__':
    main()
