<?xml version="1.0"?>
<launch>

<!-- Everything launched / included from here - bringup.launch -->

<!-- Set only one of these to true -->
<!-- Test Odom transformation -->
  <arg name="test_odom" default="false"/>
<!-- Create map using hector_mapping -->
  <arg name="hector_mapping" default="false"/>
<!-- Traditional odom_node / AMCL / move_base Navigation Stack -->
  <arg name="navigation_stack" default="false"/>
<!-- Traditional odom_node / gmapping / move_base / explore_lite Navigation Stack -->
  <arg name="gmapnav" default="false"/>
<!-- Hector / move_base / explore_lite Navigation Stack -->
  <arg name="hectornav" default="false"/>
<!-- Navigate robot using hector, AMCL and and move_base -->
  <arg name="amclhectornav" default="true"/>


<!-- Custom log level config -->
<env name="ROSCONSOLE_CONFIG_FILE"
       value="$(find edukit_bot)/config/custom_rosconsole.conf"/>

<!-- Lidar Power On -->
<!--  <node pkg="edukit_bot" type="ros_lidar_onoff" name="ros_lidar_onoff" output="screen" /> -->

<!-- Joystick Node -->
<!-- Publishes /joy (sensor_msgs/Joy) --> 
  <node pkg="joy" type="joy_node" name="joystick" output="screen">
    <param name="autorepeat_rate" value="1" />
    <param name="deadzone" value="0.01" />
  </node>

<!-- Joystick to Twist Node -->
<!-- Subscribes /joy (sensor_msgs/Joy) -->
<!-- Publishes /cmd_vel (geometry_msgs/Twist) -->
  <node pkg="teleop_twist_joy" type="teleop_node" name="joystick_to_twist" output="screen">
    <param name="scale_linear" value="0.05" /> <!-- in meters/sec -->
    <param name="scale_angular" value="0.314" /> <!-- in radians/sec -->
  </node>

<!-- Motor Driver Node -->
<!-- Subscribes /cmd_vel (geometry_msgs/Twist) -->
<!-- Publishes /lwheel_ticks and /rwheel_ticks (std_msgs/Int32) -->
  <node pkg="edukit_bot" type="driver_node" name="driver" output="screen" />

<!-- Lidar Node -->
<!-- Publishes /scan (sensor_msgs/LaserScan) and /pointcloud2d (sensor_msgs/PointCloud) with frame_id base_laser -->
  <node pkg="ldlidar_ros" type="ldlidar_ros_node" name="ldlidar_publisher_ld19" respawn="true" respawn_delay="5" output="screen">
    <param name="product_name" value="LDLiDAR_LD19"/>
    <param name="serial_baudrate" value="230400"/>
  </node>
<!-- Static TF for base_laser to base_link -->
  <node name="static_base_to_laser" pkg="tf" type="static_transform_publisher" args="0.04 0.0 0.11 1.571 0.0 0.0 base_link base_laser 50" />

<!-- IMU Node -->
<!-- Publishes /imu/data (sensor_msgs/Imu) and /imu/mag (sensor_msgs/MagneticField) with frame_id base_imu -->
  <node pkg="ros_icm20948" type="talker.py" name="ros_icm20948" respawn="true" respawn_delay="2" output="screen" />
<!-- Static TF for base_imu to base_link -->
  <node name="static_base_to_imu" pkg="tf" type="static_transform_publisher" args="-0.04 0.0 0.07 1.571 0.0 0.0 base_link base_imu 50" />


<!-- Test Odom - Poor Odom! - https://www.youtube.com/watch?v=JPdHXrhvbyc -->
<group if="$(arg test_odom)">
  <!-- Odomotry Node -->
  <!-- Subscribes /lwheel_ticks and /rwheel_ticks (std_msgs/Int32) -->
  <!-- Publishes /odom (nav_msgs/Odometry) with frame_id odom and optionally tf from odom to base_link-->
  <node pkg="edukit_bot" type="odom_node" name="odom" output="screen" >
    <param name="odom_publish_tf" value="true" />
  </node>

  <!-- Fake odom option with tf direct from twist messages -->
  <!-- <node pkg="fake_odom" type="fake_odom_node_tf" name="fake_odom_node_tf" output="screen" /> -->

  <!-- Static Transform for map to odom frames -->
  <node pkg ="tf" type="static_transform_publisher" name="static_map_to_odom" args="0.0 0.0 0.0 0.0 0.0 0.0 map odom 50"/>
</group>


<!-- Hector Mapping -->
<group if="$(arg hector_mapping)">
  <!-- Hector Mapping -->
  <!-- Subscribes to /scan -->
  <!-- Publishes /map (nav_msgs/OccupancyGrid), and map frame to base_link frame Transformation -->
  <!-- No Odom frame needed, no scanmatcher frame needed:  -->
  <!-- http://wiki.ros.org/hector_slam/Tutorials/SettingUpForYourRobot#Use_without_odom_frame -->
  <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
    <param name="pub_map_scanmatch_transform" value="false"/>
    <param name="pub_map_odom_transform" value="true"/>
    <param name="map_frame" value="map" />
    <!-- <param name="base_frame" value="base_link" /> default so can be removed once tested -->
    <param name="odom_frame" value="base_link" />
  </node>

  <!-- Save map using "rosrun map_server map_saver -f my_map" -->
</group>


<!-- Navigation using existing Map and AMCL-->
<!-- http://wiki.ros.org/navigation/Tutorials/RobotSetup -->
<group if="$(arg navigation_stack)">
  <!-- Odomotry Node -->
  <!-- Subscribes /lwheel_ticks and /rwheel_ticks (std_msgs/Int32) -->
  <!-- Publishes /odom (nav_msgs/Odometry) with frame_id odom and optionally tf from odom to base_link -->
  <node pkg="edukit_bot" type="odom_node" name="odom" output="screen" >
    <param name="odom_publish_tf" value="true" />
  </node>

  <!-- <node pkg="fake_odom" type="fake_odom_node_tf" name="fake_odom_node_tf" output="screen" /> -->

  <!-- Map Server -->
  <!-- Publishes /map and /map_metadata with frame_id map -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(find edukit_bot)/map/loft_map_4.yaml"/>

  <!-- AMCL - track the pose of the robot against a known map-->
  <!-- Subscribes to /scan (sensor_msgs/LaserScan), /tf (tf/tfMessage) and /map (nav_msgs/OccupancyGrid) -->
  <!-- Publishes TF for map to odom frames -->
  <include file="$(find edukit_bot)/launch/amcl_diff.launch" />

  <!-- Move Base -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <param name="base_global_planner" value="navfn/NavfnROS"/>
    <!-- <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/>   -->
    <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/>
    <rosparam file="$(find edukit_bot)/param/costmap_common_params.yaml" command="load" ns="global_costmap" /> 
    <rosparam file="$(find edukit_bot)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find edukit_bot)/param/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find edukit_bot)/param/global_costmap_params_static.yaml" command="load" /> 
    <rosparam file="$(find edukit_bot)/param/base_and_local_planner_params.yaml" command="load" />
  </node>

  <!-- Explore Lite -->
  <!-- <node pkg="explore_lite" type="explore" respawn="false" name="explore" output="screen">
      <rosparam file="$(find edukit_bot)/param/explore_lite.yaml" command="load" />
  </node> -->

</group>


<!-- Gmapping Navigation -->
<group if="$(arg gmapnav)">
  <!-- Odomotry Node -->
  <!-- Subscribes /lwheel_ticks and /rwheel_ticks (std_msgs/Int32) -->
  <!-- Publishes /odom (nav_msgs/Odometry) with frame_id odom and optionally tf from odom to base_link -->
  <node pkg="edukit_bot" type="odom_node" name="odom" output="screen" >
    <param name="odom_publish_tf" value="true" />
  </node>

  <!-- <node pkg="fake_odom" type="fake_odom_node_tf" name="fake_odom_node_tf" output="screen" /> -->

  <node pkg="gmapping" type="slam_gmapping" name="gmapping">
    <param name="base_frame" value="base_link"/>
    <param name="odom_frame" value="odom" />
    <param name="delta" value="0.1" />
    <param name="~srr" value="0.8" /> <!-- default: 0.1 Odometry error in translation as a function of translation (rho/rho)  -->
    <param name="~srt" value="0.9" /> <!-- default: 0.2) Odometry error in translation as a function of rotation (rho/theta)  -->
    <param name="~str" value="0.8" /> <!-- default: 0.1) Odometry error in rotation as a function of translation (theta/rho)  -->
    <param name="~stt" value="2.0" /> <!-- default: 0.2) Odometry error in rotation as a function of rotation (theta/theta)  -->

    <param name="~linearUpdate" value="0.5" /> <!-- default: 1.0) Process a scan each time the robot translates this far  -->
    <param name="~angularUpdate" value="0.5" /> <!-- default: 0.5) Process a scan each time the robot rotates this far  -->
  </node>

  <!-- Move Base -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <param name="base_global_planner" value="navfn/NavfnROS"/>
    <!-- <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/>   -->
    <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/>
    <rosparam file="$(find edukit_bot)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find edukit_bot)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find edukit_bot)/param/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find edukit_bot)/param/global_costmap_params_rolling.yaml" command="load" />
    <rosparam file="$(find edukit_bot)/param/base_local_planner_params.yaml" command="load" />
  </node>

  <!-- Explore Lite -->
  <!-- <node pkg="explore_lite" type="explore" respawn="false" name="explore" output="screen">
      <rosparam file="$(find edukit_bot)/param/explore_lite.yaml" command="load" />
  </node> -->

</group>


<!-- Hector Navigation -->
<group if="$(arg hectornav)">
  <!-- Hector Mapping -->
  <!-- Subscribes to /scan -->
  <!-- Publishes /map (nav_msgs/OccupancyGrid), /scanmatch_odom, and map frame to odom frame Transformation -->
  <remap from="scanmatch_odom" to="odom" /> <!-- move_base local planner needs a /odom topic. either A: use hector's, or -->
  <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" respawn="true" output="screen" >
    <param name="pub_map_odom_transform" value="true"/>
    <param name="pub_odometry" value="true"/> <!-- Publishes to /scanmatch_odom unless remapped -->
    <!-- <param name="base_frame" value="base_link"/> default so can be removed once tested -->
    <!-- <param name="odom_frame" value="base_link"/> --> <!-- 1: Either need to map straight from map to base_link, or -->
    <param name="pub_map_scanmatch_transform" value="false"/>
    <!-- <param name="pub_debug_output" value="true"/> --> <!-- Debug -->
    <!-- <param name="pub_drawings" value="true"/> --> <!-- Debug -->
    <!-- <param name="output_timing" value="true"/> --> <!-- Debug - takes 3 to 4ms in testing -->
  </node>

  <!-- Odomotry Node -->
  <!-- Subscribes /lwheel_ticks and /rwheel_ticks (std_msgs/Int32) -->
  <!-- Publishes /odom (nav_msgs/Odometry) with frame_id odom -->
  <!-- <node pkg="edukit_bot" type="odom_node" name="odom" output="screen" >  --> <!-- B: use odom_node's -->
  <!--  <param name="odom_publish_tf" value="false" />
  </node> -->

  <!-- 2: Static Transform for odom to base_link frames, or -->
  <node pkg ="tf" type="static_transform_publisher" name="static_odom_to_base_link" args="0.0 0.0 0.0 0.0 0.0 0.0 /odom /base_link 50"/>

  <!-- 3: Take hector /slam_out_pose and convert it to a tf from odom to base_link -->
  <!-- Needed if not using static Tf for odom to base_link, or going straight from map to base_link -->
  <!-- <node pkg="edukit_bot" type="odom_to_tf_node" name="odom_to_tf" respawn="true" output="screen" /> -->

  <!-- Move Base -->
  <node pkg="move_base" type="move_base" name="move_base" respawn="true" output="screen">
    <param name="base_global_planner" value="navfn/NavfnROS"/>
    <!-- <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/>   -->
    <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/>
    <rosparam file="$(find edukit_bot)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find edukit_bot)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find edukit_bot)/param/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find edukit_bot)/param/global_costmap_params_rolling.yaml" command="load" />
    <rosparam file="$(find edukit_bot)/param/base_and_local_planner_params.yaml" command="load" />
    <rosparam file="$(find edukit_bot)/param/recovery_params.yaml" command="load" />
  </node>

  <!-- Explore Lite -->
  <node pkg="explore_lite" type="explore" name="explore" respawn="true" output="screen">
      <rosparam file="$(find edukit_bot)/param/explore_lite.yaml" command="load" />
  </node>
</group>


<!-- AMCL and Hector Navigation -->
<group if="$(arg amclhectornav)">
  <!-- Map Server -->
  <!-- Publishes /map and /map_metadata with frame_id map -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(find edukit_bot)/map/loft_map_4.yaml"/>

  <!-- Hector Mapping -->
  <!-- Subscribe to /scan, Publish /odom -->
  <remap from="scanmatch_odom" to="odom" /> <!-- We want hector's odom topic for move_base -->
  <remap from="map" to="hector_map" /> <!-- We dont want hector's map -->
  <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" respawn="true" output="screen" >
    <param name="pub_map_odom_transform" value="true"/> <!-- reworked to odom base_link transform below -->
    <param name="map_frame" value="odom"/> <!-- Use hector to publish odom to base_link transform -->
    <param name="odom_frame" value="base_link"/>
    <param name="base_frame" value="base_link"/>
    <param name="pub_odometry" value="true"/>
    <param name="pub_map_scanmatch_transform" value="false"/>
  </node>

  <!-- AMCL - track the pose of the robot against a known map-->
  <!-- Subscribes to /scan (sensor_msgs/LaserScan), /tf (tf/tfMessage) and /map (nav_msgs/OccupancyGrid) -->
  <!-- Publishes TF for map to odom frames -->
  <include file="$(find edukit_bot)/launch/hector_amcl_diff.launch" />

  <!-- Move Base -->
  <node pkg="move_base" type="move_base" name="move_base" respawn="true" output="screen">
    <param name="base_global_planner" value="navfn/NavfnROS"/>
    <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/>
    <!-- <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/> -->
    <!-- <param name="base_local_planner" value="teb_local_planner/TebLocalPlannerROS" /> -->
    <rosparam file="$(find edukit_bot)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find edukit_bot)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find edukit_bot)/param/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find edukit_bot)/param/global_costmap_params_rolling.yaml" command="load" />
    <rosparam file="$(find edukit_bot)/param/base_and_local_planner_params.yaml" command="load" />
    <rosparam file="$(find edukit_bot)/param/recovery_params.yaml" command="load" />
  </node>

  <!-- Explore Lite -->
  <!--<node pkg="explore_lite" type="explore" name="explore" respawn="true" output="screen">
      <rosparam file="$(find edukit_bot)/param/explore_lite.yaml" command="load" />
  </node>-->
</group>


</launch>
