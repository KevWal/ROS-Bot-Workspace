<?xml version="1.0"?>
<launch>

<!-- Everything launched / included from here - bringup.launch -->

<!-- Set only one of these to true -->
<!-- Test Odom transformation -->
  <arg name="test_odom" default="true"/>
<!-- Create map using hector_mapping -->
  <arg name="hector_mapping" default="false"/>
<!-- Traditional odom_node / AMCL / move_base Navigation Stack -->
  <arg name="navigation_stack" default="false"/>
<!-- Navigate robot using laser_scan_matcher and move_base -->
  <arg name="laser_move_base" default="false"/>


<!-- Static TF for world to map -->
  <node name="static_world_to_map" pkg="tf" type="static_transform_publisher" args="0.00 0.0 0.0 0.0 0.0 0.0 world map 50" />

<!-- Static TF for base_link to base_footprint -->
  <node name="static_footprint_to_link" pkg="tf" type="static_transform_publisher" args="0.00 0.0 0.0 0.0 0.0 0.0 base_footprint base_link 50" />

<!-- Joystick Node -->
<!-- Publishes /joy (sensor_msgs/Joy) --> 
  <node pkg="joy" type="joy_node" name="joystick" output="screen">
    <param name="autorepeat_rate" value="1" />
    <param name="deadzone" value="0.01" />
  </node>

<!-- Joystick to Twist Node -->
<!-- Subscribes /joy (sensor_msgs/Joy) -->
<!-- Publishes /cmd_vel (geometry_msgs/Twist) -->
  <node pkg="teleop_twist_joy" type="teleop_node" name="joystick_to_twist" output="screen">
    <param name="scale_linear" value="0.05" /> <!-- in meters/sec -->
    <param name="scale_angular" value="0.314" /> <!-- in radians/sec -->
  </node>

<!-- Motor Driver Node -->
<!-- Subscribes /cmd_vel (geometry_msgs/Twist) -->
<!-- Publishes /lwheel_ticks and /rwheel_ticks (std_msgs/Int32) -->
  <node pkg="edukit_bot" type="driver_node" name="driver" output="screen" />

<!-- Lidar Node -->
<!-- Publishes /scan (sensor_msgs/LaserScan) and /pointcloud2d (sensor_msgs/PointCloud) with frame_id base_laser -->
  <node pkg="ldlidar_ros" type="ldlidar_ros_node" name="ldlidar_publisher_ld19" output="screen">
    <param name="product_name" value="LDLiDAR_LD19"/>
    <param name="serial_baudrate" value="230400"/>
  </node>
<!-- Static TF for laser_link to base_link -->
  <node name="static_base_to_laser" pkg="tf" type="static_transform_publisher" args="0.04 0.0 0.11 1.571 0.0 0.0 base_link base_laser 50" />

<!-- IMU Node -->
<!-- Publishes /imu/data (sensor_msgs/Imu) and /imu/mag (sensor_msgs/MagneticField) with frame_id base_imu -->
  <node pkg="ros_icm20948" type="talker.py" name="ros_icm20948" respawn="true" respawn_delay="2" output="screen" />
<!-- Static TF for base_imu to base_link -->
  <node name="static_base_to_imu" pkg="tf" type="static_transform_publisher" args="-0.04 0.0 0.07 1.571 0.0 0.0 base_link base_imu 50" />


<!-- Test Odom - fails on turn - https://www.youtube.com/watch?v=JPdHXrhvbyc -->
<group if="$(arg test_odom)">
  <!-- Odomotry Node -->
  <!-- Subscribes /lwheel_ticks and /rwheel_ticks (std_msgs/Int32) -->
  <!-- Publishes /odom (nav_msgs/Odometry) with frame_id odom -->
  <node pkg="edukit_bot" type="odom_node" name="odom" output="screen" >
    <param name="odom_publish_tf" value="true" />
  </node>

  <!-- <node pkg="fake_odom" type="fake_odom_node" name="fake_odom_node" output="screen" /> -->

  <!-- Static Transform for map to odom frames -->
  <node pkg ="tf" type="static_transform_publisher" name="static_map_to_odom" args="0.0 0.0 0.0 0.0 0.0 0.0 /map /odom 50"/>
</group>


<!-- Hector Mapping -->
<group if="$(arg hector_mapping)">
  <!-- Hector Mapping -->
  <!-- Subscribes to /scan -->
  <!-- Publishes /map (nav_msgs/OccupancyGrid), and map frame to odom frame Transformation -->
  <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen" />

  <!-- Static Transform for odom to base_footprint frames -->
  <node pkg ="tf" type="static_transform_publisher" name="static_odom_to_base_footprint" args="0.0 0.0 0.0 0.0 0.0 0.0 /odom /base_footprint 50"/>

  <!-- Save map using "rosrun map_server map_saver -f my_map" -->

  <!-- Doesnt seem to be required, we dont need a trajectory path now a geotif map -->
<!--  <include file="$(find hector_geotiff_launch)/launch/geotiff_mapper.launch">
    <arg name="trajectory_source_frame_name" value="scanmatcher_frame" />
    <arg name="map_file_path" value="$(find edukit_bot)/map" />
  </include> -->
</group>


<!-- Navigation -->
<!-- http://wiki.ros.org/navigation/Tutorials/RobotSetup -->
<group if="$(arg navigation_stack)">
  <!-- Odomotry Node -->
  <!-- Subscribes /lwheel_ticks and /rwheel_ticks (std_msgs/Int32) -->
  <!-- Publishes /odom (nav_msgs/Odometry) with frame_id odom and child_frame_id base_link -->
  <!-- Ask odom_node to publish odom to base_footprint -->
  <node pkg="edukit_bot" type="odom_node" name="odom" output="screen" >
    <param name="odom_publish_tf" value="true" />
  </node>

  <!-- <node pkg="fake_odom" type="fake_odom_node" name="fake_odom_node" output="screen" /> -->

  <!-- Map Server -->
  <!-- Publishes /map and /map_metadata with frame_id map -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(find edukit_bot)/map/loft_map_3.yaml"/>

  <!-- AMCL -->
  <!-- Subscribes to /scan -->
  <include file="$(find edukit_bot)/launch/amcl_diff.launch" />

  <!-- Move Base -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <param name="base_global_planner" value="navfn/NavfnROS"/>
    <!-- <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/>   -->
    <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/>
    <rosparam file="$(find edukit_bot)/param/costmap_common_params.yaml" command="load" ns="global_costmap" /> 
    <rosparam file="$(find edukit_bot)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find edukit_bot)/param/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find edukit_bot)/param/global_costmap_params.yaml" command="load" /> 
    <rosparam file="$(find edukit_bot)/param/base_local_planner_params.yaml" command="load" />
  </node>
</group>


<!-- Localisaion and Navigation -->
<group if="$(arg laser_move_base)">
  <!-- Odomotry Node -->
  <!-- Subscribes /lwheel_ticks and /rwheel_ticks (std_msgs/Int32) -->
  <!-- Publishes /odom (nav_msgs/Odometry) with frame_id odom and child_frame_id base_link -->
  <node pkg="edukit_bot" type="odom_node" name="odom" output="screen" >
    <param name="odom_publish_tf" value="false" />
  </node>

  <!-- Map Server -->
  <!-- Publishes /map and /map_metadata with frame_id map -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(find edukit_bot)/map/loft_map_2.yaml"/>

  <!-- Laser Scan Matcher -->
  <!-- Subscribes to /scan (sensor_msgs/LaserScan), /imu (sensor_msgs/IMU) and /odom -->
  <!-- Publishes TF for odom to base_footprint frames and /pose2D (geometry_msgs/Pose2D)-->
  <!-- Publishes Fake odom to /XXX -->
  <!-- https://github.com/benjaminnarin/laser_scan_matcher_odom -->
  <node pkg="laser_scan_matcher_odom" type="laser_scan_matcher_odom_node" name="laser_scan_matcher_odom_node" output="screen">
    <param name="fixed_frame" value="odom" />
    <param name="base_frame" value="base_footprint" />

    <param name="use_imu" value = "false" /> <!-- /imu -->
    <param name="use_odom" value = "true" /> <!-- /odom -->
    <param name="use_alpha_beta" value = "true" /> 

    <param name="publish_tf" value = "true" />
    <param name="publish_pose" value = "true" />
    <param name="publish_vel" value = "false" /> <!-- Odom -->
  </node>

<!--  <node pkg ="tf" type="static_transform_publisher" name="static_map_to_odom" args="0.0 0.0 0.0 0.0 0.0 0.0 /map /odom 50"/> -->
<!--  <node pkg ="tf" type="static_transform_publisher" name="static_odom_to_base_footprint" args="0.0 0.0 0.0 0.0 0.0 0.0 /odom /base_footprint 50"/>  -->

  <!-- AMCL - track the pose of the robot against a known map-->
  <!-- Subscribes to /scan (sensor_msgs/LaserScan), /tf (tf/tfMessage) and /map (nav_msgs/OccupancyGrid) -->
  <!-- Publishes TF for map to odom frames -->
  <include file="$(find edukit_bot)/launch/amcl_diff.launch" />

  <!-- Move Base Navigation -->
  <!-- Subscribes to TF, /odom, /map and /scan -->
  <!-- Publishes /cmd_vel -->
  <!-- <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find edukit_bot)/param/costmap_common_params.yaml" command="load" ns="global_costmap" /> 
    <rosparam file="$(find edukit_bot)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find edukit_bot)/param/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find edukit_bot)/param/global_costmap_params.yaml" command="load" /> 
    <rosparam file="$(find edukit_bot)/param/base_local_planner_params.yaml" command="load" />
  </node> -->

</group>

</launch>
